// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TCG.InvoiceService.Persistence;

#nullable disable

namespace TCG.InvoiceService.Persistence.Migrations
{
    [DbContext(typeof(ServiceDbContext))]
    [Migration("20230611160711_MerchpostGuid")]
    partial class MerchpostGuid
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("TCG.InvoiceService.Domain.Dispute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DisputeStateId")
                        .IsRequired()
                        .HasColumnType("char(1)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("DisputeStateId");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Disputes");
                });

            modelBuilder.Entity("TCG.InvoiceService.Domain.DisputeState", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("DisputeStates");
                });

            modelBuilder.Entity("TCG.InvoiceService.Domain.InvoiceBody", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("InvoiceHeadId")
                        .HasColumnType("int");

                    b.Property<int>("Line")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Reduction")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceHeadId");

                    b.ToTable("InvoiceBodies");
                });

            modelBuilder.Entity("TCG.InvoiceService.Domain.InvoiceHead", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BillAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Delivery")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("ShipAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("TVA")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalPriceHT")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalPriceTTC")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("InvoiceHeads");
                });

            modelBuilder.Entity("TCG.InvoiceService.Domain.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("BuyDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("BuyerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("GivenFidelityPoint")
                        .HasColumnType("int");

                    b.Property<Guid>("MerchPostId")
                        .HasColumnType("char(36)");

                    b.Property<string>("OrderStateId")
                        .IsRequired()
                        .HasColumnType("char(1)");

                    b.Property<bool>("Received")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.Property<decimal>("ServiceFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ShipAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ShipDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("ShipmentFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderStateId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("TCG.InvoiceService.Domain.OrderState", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(1)");

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("OrderStates");
                });

            modelBuilder.Entity("TCG.InvoiceService.Domain.Dispute", b =>
                {
                    b.HasOne("TCG.InvoiceService.Domain.DisputeState", "DisputeState")
                        .WithMany("Disputes")
                        .HasForeignKey("DisputeStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCG.InvoiceService.Domain.Order", "Order")
                        .WithOne("Dispute")
                        .HasForeignKey("TCG.InvoiceService.Domain.Dispute", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DisputeState");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("TCG.InvoiceService.Domain.InvoiceBody", b =>
                {
                    b.HasOne("TCG.InvoiceService.Domain.InvoiceHead", "InvoiceHead")
                        .WithMany("InvoiceBodies")
                        .HasForeignKey("InvoiceHeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvoiceHead");
                });

            modelBuilder.Entity("TCG.InvoiceService.Domain.InvoiceHead", b =>
                {
                    b.HasOne("TCG.InvoiceService.Domain.Order", "Order")
                        .WithOne("InvoiceHead")
                        .HasForeignKey("TCG.InvoiceService.Domain.InvoiceHead", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("TCG.InvoiceService.Domain.Order", b =>
                {
                    b.HasOne("TCG.InvoiceService.Domain.OrderState", "OrderState")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderState");
                });

            modelBuilder.Entity("TCG.InvoiceService.Domain.DisputeState", b =>
                {
                    b.Navigation("Disputes");
                });

            modelBuilder.Entity("TCG.InvoiceService.Domain.InvoiceHead", b =>
                {
                    b.Navigation("InvoiceBodies");
                });

            modelBuilder.Entity("TCG.InvoiceService.Domain.Order", b =>
                {
                    b.Navigation("Dispute")
                        .IsRequired();

                    b.Navigation("InvoiceHead")
                        .IsRequired();
                });

            modelBuilder.Entity("TCG.InvoiceService.Domain.OrderState", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
